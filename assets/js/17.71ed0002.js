(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{371:function(t,s,e){"use strict";e.r(s);var a=e(42),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("a",{attrs:{href:"https://gitee.com/weharmony/kernel_liteos_a_note",target:"_blank",rel:"noopener noreferrer"}},[t._v("鸿蒙内核源码注释中文版 【 Gitee仓 "),e("OutboundLink")],1),t._v("|"),e("a",{attrs:{href:"https://codechina.csdn.net/kuangyufei/kernel_liteos_a_note",target:"_blank",rel:"noopener noreferrer"}},[t._v(" CSDN仓 "),e("OutboundLink")],1),t._v("|"),e("a",{attrs:{href:"https://github.com/kuangyufei/kernel_liteos_a_note",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Github仓 "),e("OutboundLink")],1),t._v("|"),e("a",{attrs:{href:"https://weharmony.coding.net/public/harmony/kernel_liteos_a_note/git/files",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Coding仓 】"),e("OutboundLink")],1),t._v("精读内核源码,中文详细注解.深挖地基工程,构建底层网图.")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/kuangyufei/article/details/108727970",target:"_blank",rel:"noopener noreferrer"}},[t._v("鸿蒙源码分析系列篇 【 CSDN "),e("OutboundLink")],1),e("a",{attrs:{href:"https://my.oschina.net/u/3751245/blog/4626852",target:"_blank",rel:"noopener noreferrer"}},[t._v("| OSCHINA "),e("OutboundLink")],1),e("a",{attrs:{href:"https://gitee.com/weharmony/kernel_liteos_a_note/wikis/pages",target:"_blank",rel:"noopener noreferrer"}},[t._v("| WIKI 】"),e("OutboundLink")],1),t._v("问答式导读, 生活式比喻, 图形化展示, 层层剥开内核神秘外衣.")]),t._v(" "),e("hr"),t._v(" "),e("h3",{attrs:{id:"谁是鸿蒙内核最重要的结构体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#谁是鸿蒙内核最重要的结构体"}},[t._v("#")]),t._v(" 谁是鸿蒙内核最重要的结构体?")]),t._v(" "),e("p",[t._v("答案一定是: LOS_DL_LIST(双向链表),它长这样.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LOS_DL_LIST")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//双向链表，内核最重要结构体")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LOS_DL_LIST")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pstPrev"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< Current node's pointer to the previous node */")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//前驱节点(左手)")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LOS_DL_LIST")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pstNext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< Current node's pointer to the next node */")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//后继节点(右手)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" LOS_DL_LIST"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("结构体够简单了吧,只有前后两个指向自己的指针,但恰恰是因为太简单,所以才太不简单. 就像氢原子一样,宇宙中无处不在,占比最高,原因是因为它最简单,最稳定!")]),t._v(" "),e("p",[t._v("内核的各自模块都能看到双向链表的身影,下图是各处初始化双向链表的操作,因为太多了,只截取了部分:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200917171547946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2t1YW5neXVmZWk=,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),e("p",[t._v("很多人问图怎么来的, source insight 4.0 是阅读大型C/C++工程的必备工具,要用4.0否则中文有乱码.")]),t._v(" "),e("p",[t._v("可以豪不夸张的说理解LOS_DL_LIST及相关函数是读懂鸿蒙内核的关键。前后指针(注者后续将比喻成一对左右触手)灵活的指挥着系统精准的运行，越是深入分析内核源码，越能感受到内核开发者对LOS_DL_LIST非凡的驾驭能力，笔者仿佛看到了无数双手前后相连，拉起了一个个双向循环链表，把指针的高效能运用到了极致，这也许就是编程的艺术吧！这么重要的结构体还是需详细讲解一下.")]),t._v(" "),e("h3",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),e("p",[t._v("双向链表是指含有往前和往后两个方向的链表，即每个结点中除存放下一个节点指针外，还增加一个指向其前一个节点的指针。其头指针head是唯一确定的。从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点，这种数据结构形式使得双向链表在查找时更加方便，特别是大量数据的遍历。由于双向链表具有对称性，能方便地完成各种插入、删除等操作，但需要注意前后方向的操作。")]),t._v(" "),e("h3",{attrs:{id:"功能接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能接口"}},[t._v("#")]),t._v(" 功能接口")]),t._v(" "),e("p",[t._v("鸿蒙系统中的双向链表模块为用户提供下面几个接口。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/2991b499e4191cb7fdd733f10e13ae05.png",alt:""}})]),t._v(" "),e("p",[t._v("请结合下面的代码和图去理解双向链表,不管花多少时间,一定要理解它的插入/删除动作, 否则后续内容将无从谈起.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将指定节点初始化为双向链表节点")]),t._v("\nLITE_OS_SEC_ALW_INLINE STATIC INLINE VOID "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("LOS_ListInit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LOS_DL_LIST "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    list"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    list"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstPrev "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将指定节点挂到双向链表头部")]),t._v("\nLITE_OS_SEC_ALW_INLINE STATIC INLINE VOID "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("LOS_ListAdd")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LOS_DL_LIST "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LOS_DL_LIST "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstPrev "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    list"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstPrev "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    list"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将指定节点从链表中删除,自己把自己摘掉")]),t._v("\nLITE_OS_SEC_ALW_INLINE STATIC INLINE VOID "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("LOS_ListDelete")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LOS_DL_LIST "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstPrev "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstPrev"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstPrev"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstNext "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("pstPrev "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210108142534112.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2t1YW5neXVmZWk=,size_16,color_FFFFFF,t_70",alt:""}}),t._v("​")]),t._v(" "),e("h3",{attrs:{id:"具体用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#具体用法"}},[t._v("#")]),t._v(" 具体用法")]),t._v(" "),e("p",[t._v("举例 ProcessCB(进程控制块)是描述一个进程的所有信息,其中用到了 7个双向链表,这简直比章鱼还牛逼,章鱼也才四双触手,但进程有7双(14只)触手.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProcessCB")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    LOS_DL_LIST          pendList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< Block list to which the process belongs */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进程所属的阻塞列表,如果因拿锁失败,就由此节点挂到等锁链表上")]),t._v("\n    LOS_DL_LIST          childrenList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< my children process list */")]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//孩子进程都挂到这里,形成双循环链表")]),t._v("\n    LOS_DL_LIST          exitChildList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< my exit children process list */")]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//那些要退出孩子进程挂到这里，白发人送黑发人。")]),t._v("\n    LOS_DL_LIST          siblingList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< linkage in my parent's children list */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//兄弟进程链表, 56个民族是一家,来自同一个父进程.")]),t._v("\n    ProcessGroup         "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< Process group to which a process belongs */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所属进程组")]),t._v("\n    LOS_DL_LIST          subordinateGroupList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< linkage in my group list */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进程是组长时,有哪些组员进程")]),t._v("\n    UINT32               threadGroupID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< Which thread group , is the main thread ID of the process */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//哪个线程组是进程的主线程ID")]),t._v("\n    UINT32               threadScheduleMap"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< The scheduling bitmap table for the thread group of the\n                                                            process */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进程的各线程调度位图")]),t._v("\n    LOS_DL_LIST          threadSiblingList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< List of threads under this process */")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进程的线程(任务)列表")]),t._v("\n    LOS_DL_LIST          threadPriQueueList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OS_PRIORITY_QUEUE_NUM"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< The process's thread group schedules the\n                                                                         priority hash table */")]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进程的线程组调度优先级哈希表")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" UINT32      threadNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< Number of threads alive under this process */")]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此进程下的活动线程数")]),t._v("\n    UINT32               threadCount"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< Total number of threads created under this process */")]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在此进程下创建的线程总数")]),t._v("\n    LOS_DL_LIST          waitList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**< The process holds the waitLits to support wait/waitpid */")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进程持有等待链表以支持wait/waitpid")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" LosProcessCB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("看个简单点的 pendList表示这个进程中所有被阻塞的任务(task)都会挂到这个链表上管理. 任务阻塞的原因很多,可能是申请互斥锁失败,可能等待事件读消息队列,还可能开了一个定时任务等等.")]),t._v(" "),e("p",[t._v("再来看一个复杂点的 threadPriQueueList[OS_PRIORITY_QUEUE_NUM] ,这又是干嘛的?从名字可以看出来是线程的队列链表,在鸿蒙内核线程就是任务(task),任务分等了32个优先级,同级的任务放在同一个双向链表中, 32级就是32个双向链表,所以是个链表数组,每条链表中存放的是已就绪等待被调度的任务.")]),t._v(" "),e("p",[t._v("双向链表是内核最重要的结构体,精读内核的路上它会反复的映入你的眼帘,理解它是理解内存运作的关键所在!")]),t._v(" "),e("h3",{attrs:{id:"喜欢就关注下吧-您的关注真的很重要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#喜欢就关注下吧-您的关注真的很重要"}},[t._v("#")]),t._v(" "),e("strong",[t._v("喜欢就关注下吧,您的关注真的很重要")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://gitee.com/weharmony/kernel_liteos_a_note/raw/master/zzz/pic/other/wxcode.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("作者邮箱:weharmony@126.com")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("a",{attrs:{href:"https://gitee.com/weharmony/kernel_liteos_a_note",target:"_blank",rel:"noopener noreferrer"}},[t._v("鸿蒙内核源码注释中文版 【 Gitee仓 "),e("OutboundLink")],1),t._v("|"),e("a",{attrs:{href:"https://codechina.csdn.net/kuangyufei/kernel_liteos_a_note",target:"_blank",rel:"noopener noreferrer"}},[t._v(" CSDN仓 "),e("OutboundLink")],1),t._v("|"),e("a",{attrs:{href:"https://github.com/kuangyufei/kernel_liteos_a_note",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Github仓 "),e("OutboundLink")],1),t._v("|"),e("a",{attrs:{href:"https://weharmony.coding.net/public/harmony/kernel_liteos_a_note/git/files",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Coding仓 】"),e("OutboundLink")],1),t._v("精读内核源码,中文详细注解.深挖地基工程,构建底层网图.")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/kuangyufei/article/details/108727970",target:"_blank",rel:"noopener noreferrer"}},[t._v("鸿蒙源码分析系列篇 【 CSDN "),e("OutboundLink")],1),e("a",{attrs:{href:"https://my.oschina.net/u/3751245/blog/4626852",target:"_blank",rel:"noopener noreferrer"}},[t._v("| OSCHINA "),e("OutboundLink")],1),e("a",{attrs:{href:"https://gitee.com/weharmony/kernel_liteos_a_note/wikis/pages",target:"_blank",rel:"noopener noreferrer"}},[t._v("| WIKI 】"),e("OutboundLink")],1),t._v("问答式导读, 生活式比喻, 图形化展示, 层层剥开内核神秘外衣.")])])}),[],!1,null,null,null);s.default=n.exports}}]);